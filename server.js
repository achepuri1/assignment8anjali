const express = require('express');
const app = express();
const port = 3000;
const cors = require('cors');

const mariadb = require('mariadb');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUI = require('swagger-ui-express');
const pool = mariadb.createPool({
     host: 'localhost',
     user:'root',
     password: 'root',
     database: 'sample',
     port: 3306,
     connectionLimit: 5
});

app.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json');
  next();
});

const options ={
    swaggerDefinition: {
        info: {
            title: 'Personal budget API',
            version: '1.0.0',
            description: 'Personal Budget Api autogenerated '
        
        },
        host: 'localhost:3000',
        basePath: '/',

    },
    apis: ['./server.js'],
};
const specs = swaggerJsdoc(options);

app.use(express.urlencoded({ extended: true }));
app.use(express.json());

app.use('/docs', swaggerUI.serve, swaggerUI.setup(specs));
app.use(cors());

app.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json');
  next();
});


// GET Request 1: Get all customers list
app.get('/customers', (req, res) => {
  pool.getConnection()
      .then(conn => {

         conn.query("SElECT * FROM customer")
             .then((rows) => {
                res.json(rows);
                conn.end();

             })
            .catch(err => {
                console.log(err);
                conn.end();
            })

       }).catch(err => {
           console.log(err);
       });
  });

 /**
 * @swagger
 * /customers:
 *     get:
 *       description: Return all customers
 *       produces:
 *           - application/json
 *       responses:
 *           200:
 *               description: Object agents containing array of customers objects with all names
 */


//GET Request 2: Get all agents list
app.get('/agents', (req, res) => {
  pool.getConnection()
      .then(conn => {

         conn.query("SElECT * FROM agents")
             .then((rows) => {
                res.json(rows);
                conn.end();

             })
            .catch(err => {
                console.log(err);
                conn.end();
            })

       }).catch(err => {
           console.log(err);
       });
});

  /**
 * @swagger
 * /agents:
 *     get:
 *       description: Return all agents
 *       produces:
 *           - application/json
 *       responses:
 *           200:
 *               description: Object agents containing array of agents objects with all names
 */

  // GET Request 3: Get all foods list
app.get('/foods', (req, res) => {
  pool.getConnection()
      .then(conn => {

         conn.query("SElECT * FROM foods")
             .then((rows) => {
                res.json(rows);
                conn.end();

             })
            .catch(err => {
                console.log(err);
                conn.end();
            })

       }).catch(err => {
           console.log(err);
       });
 });

  /**
 * @swagger
 * /foods:
 *     get:
 *       description: Return all foods
 *       produces:
 *           - application/json
 *       responses:
 *           200:
 *               description: Object foods containing array of foods objects with all names
 *

 */


// POST Request 4: Add a new agent
app.post('agents', (req, res) => {
    const { AGENT_CODE, AGENT_NAME, WORKING_AREA, COMMISSION, PHONE_NO, COUNTRY } = req.body;
    const query = `
      INSERT INTO agents (AGENT_CODE, AGENT_NAME, WORKING_AREA, COMMISSION, PHONE_NO, COUNTRY)
      VALUES (?, ?, ?, ?, ?, ?);
    `;
    const values = [AGENT_CODE, AGENT_NAME, WORKING_AREA, COMMISSION, PHONE_NO, COUNTRY];
  
    pool.query(query, values, (err, result) => {
      if (err) {
        console.error('Error executing query:', err);
        res.status(500).json({ error: 'Internal Server Error' });
      } else {
        res.json({ message: 'Agent added successfully', insertedId: result.insertId });
      }
    });
  });

  /**
 * @swagger
 * /agents:
 *   post:
 *     summary: adding agents
 *     description: adding agents to the existing data base
 *     parameters:
 *       - in: body
 *         name: body
 *         schema:
 *           type: object
 *           properties: AGENT_CODE, AGENT_NAME, WORKING_AREA, COMMISSION, PHONE_NO, COUNTRY
 *           
 *     responses:
 *       200:
 *         description: Successful operation
 */







// PATCH Request 5: Partial update of an existing agent
app.patch('/api/agents/:agentCode', (req, res) => {
    const agentCode = req.params.agentCode;
    const updateFields = req.body;
    const fieldNames = Object.keys(updateFields);
    const placeholders = fieldNames.map((field) => `${field} = ?`).join(', ');
  
    const query = `
      UPDATE agents
      SET ${placeholders}
      WHERE AGENT_CODE = ?;
    `;
  
    const values = [...fieldNames.map((field) => updateFields[field]), agentCode];
  
    pool.query(query, values, (err, result) => {
      if (err) {
        console.error('Error executing query:', err);
        res.status(500).json({ error: 'Internal Server Error' });
      } else {
        res.json({ message: 'Agent updated successfully', affectedRows: result.affectedRows });
      }
    });
  });
  

  /**
 * @swagger
 * /agents:
 *   patch:
 *     summary: update agents
 *     description: updating agents to the existing data base
 *     parameters:
 *       - in: body
 *         name: body
 *         schema:
 *           type: object
 *           properties: AGENT_CODE
 *           
 *     responses:
 *       200:
 *         description: Successful operation
 */

// PUT Request 6: Update an existing agent
app.put('/api/agents/:agentCode', (req, res) => {
    const agentCode = req.params.agentCode;
    const { AGENT_NAME, WORKING_AREA, COMMISSION, PHONE_NO, COUNTRY } = req.body;
    const query = `
      UPDATE agents
      SET AGENT_NAME = ?, WORKING_AREA = ?, COMMISSION = ?, PHONE_NO = ?, COUNTRY = ?
      WHERE AGENT_CODE = ?;
    `;
    const values = [AGENT_NAME, WORKING_AREA, COMMISSION, PHONE_NO, COUNTRY, agentCode];
  
    pool.query(query, values, (err, result) => {
      if (err) {
        console.error('Error executing query:', err);
        res.status(500).json({ error: 'Internal Server Error' });
      } else {
        res.json({ message: 'Agent updated successfully', affectedRows: result.affectedRows });
      }
    });
  });
  /**
 * @swagger
 * /agents:
 *   put: 
 *     summary: update existing agents
 *     description: updating agents to the existing data base
 *     parameters:
 *       - in: body
 *         name: body
 *         schema:
 *           type: object
 *           properties: AGENT_NAME, WORKING_AREA, COMMISSION, PHONE_NO, COUNTRY, agentCode
 *           
 *     responses:
 *       200:
 *         description: Successful operation
 */

 // DELETE Request 7: Delete an agent
app.delete('/api/agents/:agentCode', (req, res) => {
    const agentCode = req.params.agentCode;
    const query = 'DELETE FROM agents WHERE AGENT_CODE = ?';
  
    pool.query(query, [agentCode], (err, result) => {
      if (err) {
        console.error('Error executing query:', err);
        res.status(500).json({ error: 'Internal Server Error' });
      } else {
        res.json({ message: 'Agent deleted successfully', affectedRows: result.affectedRows });
      }
    });
  });

 /**
 * @swagger
 * /agents:
 *     delete:
 *       description: delete an agent
 *       produces:
 *           - application/json
 *       responses:
 *           200:
 *               description: delete an agent 
 */

app.listen(port, () => {
  console.log(`Server is listening at http://localhost:${port}`);
});
